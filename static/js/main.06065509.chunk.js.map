{"version":3,"sources":["Header.js","AddSubscriber.js","ShowSubscribers.js","PhoneDirectory.js","serviceWorker.js","index.js"],"names":["Header","props","className","heading","AddSubscriber","inputChangedHandler","e","state","target","name","value","setState","onFormSubmitted","preventDefault","addSubscriberHandler","id","phone","history","push","this","to","onSubmit","bind","htmlFor","type","onChange","Component","ShowSubscribers","onDeletedClick","subscriberId","deleteSubscriberHandler","subscribersList","map","sub","key","onClick","PhoneDirectory","subscriberIndex","forEach","subscriber","index","newSubscribers","splice","subscribers","newSubscriber","length","basename","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.06065509.chunk.js","sourcesContent":["import React from  'react';\r\nimport './Header.css';\r\n// const Header=function(){\r\n    // const headerStyle={\r\n    //     textAlign:'center',\r\n    //     padding:20,\r\n    //     background:'#000',\r\n    //     color:'#fff',\r\n    //     textTransform:'uppercase'\r\n    // };\r\n    const Header=function(props)\r\n    {\r\n    return(\r\n    //    <div style={headerStyle}>\r\n    <div className=\"header\">\r\n            {/*Phone Directory*/}\r\n            {props.heading}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React,{Component} from 'react';\r\nimport Header from './Header';\r\nimport './AddSubscriber.css';\r\nimport { Link } from 'react-router-dom';\r\nclass AddSubscriber extends Component{\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            id: 0,\r\n            name: '',\r\n            phone: ''\r\n        }\r\n    }\r\n\r\n    inputChangedHandler = (e) => {\r\n        const state = this.state;\r\n        state[e.target.name] = e.target.value;\r\n        this.setState(state);\r\n    }\r\n    onFormSubmitted = (e) => {\r\n        e.preventDefault();\r\n        this.props.addSubscriberHandler(this.state);\r\n        this.setState({ id: 0, name: '', phone: ' ' });\r\n        this.props.history.push(\"/\");\r\n    }\r\n\r\n    render(){\r\n        const {name, phone} = this.state;\r\n\r\n        return(\r\n            <div>\r\n                <Header heading =\"Add Subscriber\" />\r\n                <div className=\"component-body-container\">\r\n                   \r\n                    <Link to=\"/\">\r\n                        <button className=\"custom-btn\">Back</button>\r\n                    </Link>\r\n                    <form className=\"subscriber-form\" onSubmit={this.onFormSubmitted.bind(this)}>\r\n                        <label htmlFor=\"name\" className=\"label-control\">Name: </label><br />\r\n                        <input id=\"name\" type=\"text\" className=\"input-control\" name=\"name\" onChange={this.inputChangedHandler} /><br /><br />\r\n                        <label htmlFor=\"phone\" className=\"label-control\">Phone: </label><br />\r\n                        <input id=\"phone\" type=\"text\" className=\"input-control\" name=\"phone\" onChange={this.inputChangedHandler} /><br /><br />\r\n                        <div className=\"subscriber-info-container\">\r\n                        <span className=\"subscriber-to-add-heading\">Subscriber to be added: </span><br />\r\n                            <span className=\"subscriber-info\">Name: {name}</span><br />\r\n                            <span className=\"subscriber-info\">Phone: {phone}</span><br />\r\n                        </div>\r\n                        <button type=\"submit\" className=\"custom-btn add-btn\">Add</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default AddSubscriber;","import React, { Component } from 'react';\r\nimport Header from './Header.js';\r\nimport './ShowSubscribers.css';\r\nimport { Link } from 'react-router-dom';\r\nclass ShowSubscribers extends Component {\r\n    onDeletedClick = (subscriberId) => {\r\n        this.props.deleteSubscriberHandler(subscriberId); \r\n        \r\n      }\r\n    render() {\r\n        \r\n        return (\r\n            <div>\r\n              <Header heading=\"Phone Directory\" />\r\n              <div className=\"component-body-container\">\r\n              <Link to=\"/add\">\r\n            <button className=\"custom-btn add-btn\">Add</button>\r\n          </Link>\r\n                <div className=\"grid-container heading-container\">\r\n                  <span className=\"grid-item name-heading\">Name</span>\r\n                  <span className=\"grid-item phone-heading\">Phone</span>\r\n                </div>\r\n                {\r\n                    this.props.subscribersList.map(sub => {\r\n                        return <div key={sub.id} className=\"grid-container\">\r\n                          <span className=\"grid-item\">{sub.name}</span>\r\n                          <span className=\"grid-item\">{sub.phone}</span>\r\n                          <span className=\"grid-item action-btn-container\">\r\n                          <button className=\"custom-btn delete-btn\" onClick={this.onDeletedClick.bind(this, sub.id)}>Delete</button>\r\n                          </span>\r\n                        </div>\r\n                      })\r\n                    }\r\n                  </div>\r\n                </div>\r\n              );\r\n            }\r\n          }\r\n          export default ShowSubscribers;","import React, { Component } from 'react';\r\nimport AddSubscriber from './AddSubscriber';\r\nimport ShowSubscribers from './ShowSubscribers';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nclass PhoneDirectory extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            subscribersList: [\r\n                {\r\n                    id: 1,\r\n                    name: \"Shilpa Bhat\",\r\n                    phone: \"9999999999\"\r\n                },\r\n                {\r\n                    id: 2,\r\n                    name: \"Srishti Gupta\",\r\n                    phone: \"8888888888\"\r\n                }\r\n            ]\r\n        }\r\n    }\r\n    deleteSubscriberHandler = (subscriberId) => {\r\n      let subscribersList = this.state.subscribersList;\r\n      let subscriberIndex = 0;\r\n      subscribersList.forEach(function (subscriber, index) {\r\n          if (subscriber.id === subscriberId) {\r\n              subscriberIndex = index;\r\n          }\r\n      }, this);\r\n      let newSubscribers = subscribersList;\r\n      newSubscribers.splice(subscriberIndex, 1);\r\n      this.setState({subscribers: newSubscribers});\r\n  }\r\n\r\n    addSubscriberHandler = (newSubscriber) => {\r\n        let subscribersList = this.state.subscribersList;\r\n        if (subscribersList.length > 0) {\r\n            newSubscriber.id = subscribersList[subscribersList.length - 1].id + 1;\r\n        } else {\r\n            newSubscriber.id = 1;\r\n        }\r\n        subscribersList.push(newSubscriber);\r\n        this.setState({ subscribersList: subscribersList });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n           \r\n            <Router basename=\"/phone-directory\">\r\n            <div>\r\n            <Route exact path=\"/\" render={(props) => <ShowSubscribers {...props} subscribersList={this.state.subscribersList} deleteSubscriberHandler={this.deleteSubscriberHandler} />} />\r\n                <Route exact path=\"/add\" render={({history}, props) => <AddSubscriber history={history} {...props} addSubscriberHandler={this.addSubscriberHandler} />} />\r\n            </div>\r\n        </Router>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PhoneDirectory; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport PhoneDirectory from './PhoneDirectory';\nimport * as serviceWorker from './serviceWorker';\n\nimport './common.css';\n\nReactDOM.render(<PhoneDirectory/>, document.getElementById('root'));\n//ReactDOM.render(<AddSusbscriber />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}